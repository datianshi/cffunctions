// Code generated by counterfeiter. DO NOT EDIT.
package cffunctionsfakes

import (
	"io"
	"net/url"
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/datianshi/cffunctions"
)

type FakeAPI struct {
	BindRouteStub        func(routeGUID, appGUID string) error
	bindRouteMutex       sync.RWMutex
	bindRouteArgsForCall []struct {
		routeGUID string
		appGUID   string
	}
	bindRouteReturns struct {
		result1 error
	}
	bindRouteReturnsOnCall map[int]struct {
		result1 error
	}
	CreateAppStub        func(appCreateRequest cfclient.AppCreateRequest) (app cfclient.App, err error)
	createAppMutex       sync.RWMutex
	createAppArgsForCall []struct {
		appCreateRequest cfclient.AppCreateRequest
	}
	createAppReturns struct {
		result1 cfclient.App
		result2 error
	}
	createAppReturnsOnCall map[int]struct {
		result1 cfclient.App
		result2 error
	}
	CreateOrgStub        func(req cfclient.OrgRequest) (cfclient.Org, error)
	createOrgMutex       sync.RWMutex
	createOrgArgsForCall []struct {
		req cfclient.OrgRequest
	}
	createOrgReturns struct {
		result1 cfclient.Org
		result2 error
	}
	createOrgReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	CreateRouteStub        func(routeRequest cfclient.RouteRequest) (route cfclient.Route, err error)
	createRouteMutex       sync.RWMutex
	createRouteArgsForCall []struct {
		routeRequest cfclient.RouteRequest
	}
	createRouteReturns struct {
		result1 cfclient.Route
		result2 error
	}
	createRouteReturnsOnCall map[int]struct {
		result1 cfclient.Route
		result2 error
	}
	DeleteAppStub        func(guid string) error
	deleteAppMutex       sync.RWMutex
	deleteAppArgsForCall []struct {
		guid string
	}
	deleteAppReturns struct {
		result1 error
	}
	deleteAppReturnsOnCall map[int]struct {
		result1 error
	}
	GetAppBitsStub        func(appGUID string) (r io.ReadCloser, err error)
	getAppBitsMutex       sync.RWMutex
	getAppBitsArgsForCall []struct {
		appGUID string
	}
	getAppBitsReturns struct {
		result1 io.ReadCloser
		result2 error
	}
	getAppBitsReturnsOnCall map[int]struct {
		result1 io.ReadCloser
		result2 error
	}
	GetAppByGuidStub        func(guid string) (app cfclient.App, err error)
	getAppByGuidMutex       sync.RWMutex
	getAppByGuidArgsForCall []struct {
		guid string
	}
	getAppByGuidReturns struct {
		result1 cfclient.App
		result2 error
	}
	getAppByGuidReturnsOnCall map[int]struct {
		result1 cfclient.App
		result2 error
	}
	GetAppInstancesStub        func(guid string) (instances map[string]cfclient.AppInstance, err error)
	getAppInstancesMutex       sync.RWMutex
	getAppInstancesArgsForCall []struct {
		guid string
	}
	getAppInstancesReturns struct {
		result1 map[string]cfclient.AppInstance
		result2 error
	}
	getAppInstancesReturnsOnCall map[int]struct {
		result1 map[string]cfclient.AppInstance
		result2 error
	}
	GetAppRoutesStub        func(appGUID string) ([]cfclient.Route, error)
	getAppRoutesMutex       sync.RWMutex
	getAppRoutesArgsForCall []struct {
		appGUID string
	}
	getAppRoutesReturns struct {
		result1 []cfclient.Route
		result2 error
	}
	getAppRoutesReturnsOnCall map[int]struct {
		result1 []cfclient.Route
		result2 error
	}
	GetInfoStub        func() (*cfclient.Info, error)
	getInfoMutex       sync.RWMutex
	getInfoArgsForCall []struct{}
	getInfoReturns     struct {
		result1 *cfclient.Info
		result2 error
	}
	getInfoReturnsOnCall map[int]struct {
		result1 *cfclient.Info
		result2 error
	}
	GetOrgByNameStub        func(name string) (cfclient.Org, error)
	getOrgByNameMutex       sync.RWMutex
	getOrgByNameArgsForCall []struct {
		name string
	}
	getOrgByNameReturns struct {
		result1 cfclient.Org
		result2 error
	}
	getOrgByNameReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	GetSharedDomainByNameStub        func(name string) (cfclient.SharedDomain, error)
	getSharedDomainByNameMutex       sync.RWMutex
	getSharedDomainByNameArgsForCall []struct {
		name string
	}
	getSharedDomainByNameReturns struct {
		result1 cfclient.SharedDomain
		result2 error
	}
	getSharedDomainByNameReturnsOnCall map[int]struct {
		result1 cfclient.SharedDomain
		result2 error
	}
	GetSpaceByNameStub        func(spaceName string, orgGUID string) (space cfclient.Space, err error)
	getSpaceByNameMutex       sync.RWMutex
	getSpaceByNameArgsForCall []struct {
		spaceName string
		orgGUID   string
	}
	getSpaceByNameReturns struct {
		result1 cfclient.Space
		result2 error
	}
	getSpaceByNameReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	ListAppsStub        func() ([]cfclient.App, error)
	listAppsMutex       sync.RWMutex
	listAppsArgsForCall []struct{}
	listAppsReturns     struct {
		result1 []cfclient.App
		result2 error
	}
	listAppsReturnsOnCall map[int]struct {
		result1 []cfclient.App
		result2 error
	}
	ListBuildpacksStub        func() ([]cfclient.Buildpack, error)
	listBuildpacksMutex       sync.RWMutex
	listBuildpacksArgsForCall []struct{}
	listBuildpacksReturns     struct {
		result1 []cfclient.Buildpack
		result2 error
	}
	listBuildpacksReturnsOnCall map[int]struct {
		result1 []cfclient.Buildpack
		result2 error
	}
	ListDomainsStub        func() ([]cfclient.Domain, error)
	listDomainsMutex       sync.RWMutex
	listDomainsArgsForCall []struct{}
	listDomainsReturns     struct {
		result1 []cfclient.Domain
		result2 error
	}
	listDomainsReturnsOnCall map[int]struct {
		result1 []cfclient.Domain
		result2 error
	}
	ListOrgQuotasStub        func() ([]cfclient.OrgQuota, error)
	listOrgQuotasMutex       sync.RWMutex
	listOrgQuotasArgsForCall []struct{}
	listOrgQuotasReturns     struct {
		result1 []cfclient.OrgQuota
		result2 error
	}
	listOrgQuotasReturnsOnCall map[int]struct {
		result1 []cfclient.OrgQuota
		result2 error
	}
	ListOrgsStub        func() ([]cfclient.Org, error)
	listOrgsMutex       sync.RWMutex
	listOrgsArgsForCall []struct{}
	listOrgsReturns     struct {
		result1 []cfclient.Org
		result2 error
	}
	listOrgsReturnsOnCall map[int]struct {
		result1 []cfclient.Org
		result2 error
	}
	ListRoutesStub        func() ([]cfclient.Route, error)
	listRoutesMutex       sync.RWMutex
	listRoutesArgsForCall []struct{}
	listRoutesReturns     struct {
		result1 []cfclient.Route
		result2 error
	}
	listRoutesReturnsOnCall map[int]struct {
		result1 []cfclient.Route
		result2 error
	}
	ListSecGroupsStub        func() ([]cfclient.SecGroup, error)
	listSecGroupsMutex       sync.RWMutex
	listSecGroupsArgsForCall []struct{}
	listSecGroupsReturns     struct {
		result1 []cfclient.SecGroup
		result2 error
	}
	listSecGroupsReturnsOnCall map[int]struct {
		result1 []cfclient.SecGroup
		result2 error
	}
	ListServiceBindingsStub        func() ([]cfclient.ServiceBinding, error)
	listServiceBindingsMutex       sync.RWMutex
	listServiceBindingsArgsForCall []struct{}
	listServiceBindingsReturns     struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}
	listServiceBindingsReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}
	ListServiceBrokersStub        func() ([]cfclient.ServiceBroker, error)
	listServiceBrokersMutex       sync.RWMutex
	listServiceBrokersArgsForCall []struct{}
	listServiceBrokersReturns     struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}
	listServiceBrokersReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}
	ListServiceInstancesStub        func() ([]cfclient.ServiceInstance, error)
	listServiceInstancesMutex       sync.RWMutex
	listServiceInstancesArgsForCall []struct{}
	listServiceInstancesReturns     struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}
	listServiceInstancesReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}
	ListServiceKeysStub        func() ([]cfclient.ServiceKey, error)
	listServiceKeysMutex       sync.RWMutex
	listServiceKeysArgsForCall []struct{}
	listServiceKeysReturns     struct {
		result1 []cfclient.ServiceKey
		result2 error
	}
	listServiceKeysReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceKey
		result2 error
	}
	ListServicePlanVisibilitiesStub        func() ([]cfclient.ServicePlanVisibility, error)
	listServicePlanVisibilitiesMutex       sync.RWMutex
	listServicePlanVisibilitiesArgsForCall []struct{}
	listServicePlanVisibilitiesReturns     struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}
	listServicePlanVisibilitiesReturnsOnCall map[int]struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}
	ListServicePlansStub        func() ([]cfclient.ServicePlan, error)
	listServicePlansMutex       sync.RWMutex
	listServicePlansArgsForCall []struct{}
	listServicePlansReturns     struct {
		result1 []cfclient.ServicePlan
		result2 error
	}
	listServicePlansReturnsOnCall map[int]struct {
		result1 []cfclient.ServicePlan
		result2 error
	}
	ListServicesStub        func() ([]cfclient.Service, error)
	listServicesMutex       sync.RWMutex
	listServicesArgsForCall []struct{}
	listServicesReturns     struct {
		result1 []cfclient.Service
		result2 error
	}
	listServicesReturnsOnCall map[int]struct {
		result1 []cfclient.Service
		result2 error
	}
	ListSharedDomainsStub        func() ([]cfclient.SharedDomain, error)
	listSharedDomainsMutex       sync.RWMutex
	listSharedDomainsArgsForCall []struct{}
	listSharedDomainsReturns     struct {
		result1 []cfclient.SharedDomain
		result2 error
	}
	listSharedDomainsReturnsOnCall map[int]struct {
		result1 []cfclient.SharedDomain
		result2 error
	}
	ListSpacesStub        func() ([]cfclient.Space, error)
	listSpacesMutex       sync.RWMutex
	listSpacesArgsForCall []struct{}
	listSpacesReturns     struct {
		result1 []cfclient.Space
		result2 error
	}
	listSpacesReturnsOnCall map[int]struct {
		result1 []cfclient.Space
		result2 error
	}
	ListSpaceQuotasStub        func() ([]cfclient.SpaceQuota, error)
	listSpaceQuotasMutex       sync.RWMutex
	listSpaceQuotasArgsForCall []struct{}
	listSpaceQuotasReturns     struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}
	listSpaceQuotasReturnsOnCall map[int]struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}
	ListStacksStub        func() ([]cfclient.Stack, error)
	listStacksMutex       sync.RWMutex
	listStacksArgsForCall []struct{}
	listStacksReturns     struct {
		result1 []cfclient.Stack
		result2 error
	}
	listStacksReturnsOnCall map[int]struct {
		result1 []cfclient.Stack
		result2 error
	}
	ListUserProvidedServiceInstancesStub        func() ([]cfclient.UserProvidedServiceInstance, error)
	listUserProvidedServiceInstancesMutex       sync.RWMutex
	listUserProvidedServiceInstancesArgsForCall []struct{}
	listUserProvidedServiceInstancesReturns     struct {
		result1 []cfclient.UserProvidedServiceInstance
		result2 error
	}
	listUserProvidedServiceInstancesReturnsOnCall map[int]struct {
		result1 []cfclient.UserProvidedServiceInstance
		result2 error
	}
	ListUsersStub        func() (cfclient.Users, error)
	listUsersMutex       sync.RWMutex
	listUsersArgsForCall []struct{}
	listUsersReturns     struct {
		result1 cfclient.Users
		result2 error
	}
	listUsersReturnsOnCall map[int]struct {
		result1 cfclient.Users
		result2 error
	}
	UpdateAppStub        func(appGUID string, aur cfclient.AppUpdateResource) (cfclient.UpdateResponse, error)
	updateAppMutex       sync.RWMutex
	updateAppArgsForCall []struct {
		appGUID string
		aur     cfclient.AppUpdateResource
	}
	updateAppReturns struct {
		result1 cfclient.UpdateResponse
		result2 error
	}
	updateAppReturnsOnCall map[int]struct {
		result1 cfclient.UpdateResponse
		result2 error
	}
	UploadAppBitsStub        func(file io.Reader, appGUID string) error
	uploadAppBitsMutex       sync.RWMutex
	uploadAppBitsArgsForCall []struct {
		file    io.Reader
		appGUID string
	}
	uploadAppBitsReturns struct {
		result1 error
	}
	uploadAppBitsReturnsOnCall map[int]struct {
		result1 error
	}
	ListSpacesByQueryStub        func(query url.Values) ([]cfclient.Space, error)
	listSpacesByQueryMutex       sync.RWMutex
	listSpacesByQueryArgsForCall []struct {
		query url.Values
	}
	listSpacesByQueryReturns struct {
		result1 []cfclient.Space
		result2 error
	}
	listSpacesByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.Space
		result2 error
	}
	ListOrgsByQueryStub        func(query url.Values) ([]cfclient.Org, error)
	listOrgsByQueryMutex       sync.RWMutex
	listOrgsByQueryArgsForCall []struct {
		query url.Values
	}
	listOrgsByQueryReturns struct {
		result1 []cfclient.Org
		result2 error
	}
	listOrgsByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.Org
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) BindRoute(routeGUID string, appGUID string) error {
	fake.bindRouteMutex.Lock()
	ret, specificReturn := fake.bindRouteReturnsOnCall[len(fake.bindRouteArgsForCall)]
	fake.bindRouteArgsForCall = append(fake.bindRouteArgsForCall, struct {
		routeGUID string
		appGUID   string
	}{routeGUID, appGUID})
	fake.recordInvocation("BindRoute", []interface{}{routeGUID, appGUID})
	fake.bindRouteMutex.Unlock()
	if fake.BindRouteStub != nil {
		return fake.BindRouteStub(routeGUID, appGUID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.bindRouteReturns.result1
}

func (fake *FakeAPI) BindRouteCallCount() int {
	fake.bindRouteMutex.RLock()
	defer fake.bindRouteMutex.RUnlock()
	return len(fake.bindRouteArgsForCall)
}

func (fake *FakeAPI) BindRouteArgsForCall(i int) (string, string) {
	fake.bindRouteMutex.RLock()
	defer fake.bindRouteMutex.RUnlock()
	return fake.bindRouteArgsForCall[i].routeGUID, fake.bindRouteArgsForCall[i].appGUID
}

func (fake *FakeAPI) BindRouteReturns(result1 error) {
	fake.BindRouteStub = nil
	fake.bindRouteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAPI) BindRouteReturnsOnCall(i int, result1 error) {
	fake.BindRouteStub = nil
	if fake.bindRouteReturnsOnCall == nil {
		fake.bindRouteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.bindRouteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAPI) CreateApp(appCreateRequest cfclient.AppCreateRequest) (app cfclient.App, err error) {
	fake.createAppMutex.Lock()
	ret, specificReturn := fake.createAppReturnsOnCall[len(fake.createAppArgsForCall)]
	fake.createAppArgsForCall = append(fake.createAppArgsForCall, struct {
		appCreateRequest cfclient.AppCreateRequest
	}{appCreateRequest})
	fake.recordInvocation("CreateApp", []interface{}{appCreateRequest})
	fake.createAppMutex.Unlock()
	if fake.CreateAppStub != nil {
		return fake.CreateAppStub(appCreateRequest)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createAppReturns.result1, fake.createAppReturns.result2
}

func (fake *FakeAPI) CreateAppCallCount() int {
	fake.createAppMutex.RLock()
	defer fake.createAppMutex.RUnlock()
	return len(fake.createAppArgsForCall)
}

func (fake *FakeAPI) CreateAppArgsForCall(i int) cfclient.AppCreateRequest {
	fake.createAppMutex.RLock()
	defer fake.createAppMutex.RUnlock()
	return fake.createAppArgsForCall[i].appCreateRequest
}

func (fake *FakeAPI) CreateAppReturns(result1 cfclient.App, result2 error) {
	fake.CreateAppStub = nil
	fake.createAppReturns = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) CreateAppReturnsOnCall(i int, result1 cfclient.App, result2 error) {
	fake.CreateAppStub = nil
	if fake.createAppReturnsOnCall == nil {
		fake.createAppReturnsOnCall = make(map[int]struct {
			result1 cfclient.App
			result2 error
		})
	}
	fake.createAppReturnsOnCall[i] = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) CreateOrg(req cfclient.OrgRequest) (cfclient.Org, error) {
	fake.createOrgMutex.Lock()
	ret, specificReturn := fake.createOrgReturnsOnCall[len(fake.createOrgArgsForCall)]
	fake.createOrgArgsForCall = append(fake.createOrgArgsForCall, struct {
		req cfclient.OrgRequest
	}{req})
	fake.recordInvocation("CreateOrg", []interface{}{req})
	fake.createOrgMutex.Unlock()
	if fake.CreateOrgStub != nil {
		return fake.CreateOrgStub(req)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createOrgReturns.result1, fake.createOrgReturns.result2
}

func (fake *FakeAPI) CreateOrgCallCount() int {
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	return len(fake.createOrgArgsForCall)
}

func (fake *FakeAPI) CreateOrgArgsForCall(i int) cfclient.OrgRequest {
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	return fake.createOrgArgsForCall[i].req
}

func (fake *FakeAPI) CreateOrgReturns(result1 cfclient.Org, result2 error) {
	fake.CreateOrgStub = nil
	fake.createOrgReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) CreateOrgReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.CreateOrgStub = nil
	if fake.createOrgReturnsOnCall == nil {
		fake.createOrgReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.createOrgReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) CreateRoute(routeRequest cfclient.RouteRequest) (route cfclient.Route, err error) {
	fake.createRouteMutex.Lock()
	ret, specificReturn := fake.createRouteReturnsOnCall[len(fake.createRouteArgsForCall)]
	fake.createRouteArgsForCall = append(fake.createRouteArgsForCall, struct {
		routeRequest cfclient.RouteRequest
	}{routeRequest})
	fake.recordInvocation("CreateRoute", []interface{}{routeRequest})
	fake.createRouteMutex.Unlock()
	if fake.CreateRouteStub != nil {
		return fake.CreateRouteStub(routeRequest)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createRouteReturns.result1, fake.createRouteReturns.result2
}

func (fake *FakeAPI) CreateRouteCallCount() int {
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	return len(fake.createRouteArgsForCall)
}

func (fake *FakeAPI) CreateRouteArgsForCall(i int) cfclient.RouteRequest {
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	return fake.createRouteArgsForCall[i].routeRequest
}

func (fake *FakeAPI) CreateRouteReturns(result1 cfclient.Route, result2 error) {
	fake.CreateRouteStub = nil
	fake.createRouteReturns = struct {
		result1 cfclient.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) CreateRouteReturnsOnCall(i int, result1 cfclient.Route, result2 error) {
	fake.CreateRouteStub = nil
	if fake.createRouteReturnsOnCall == nil {
		fake.createRouteReturnsOnCall = make(map[int]struct {
			result1 cfclient.Route
			result2 error
		})
	}
	fake.createRouteReturnsOnCall[i] = struct {
		result1 cfclient.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) DeleteApp(guid string) error {
	fake.deleteAppMutex.Lock()
	ret, specificReturn := fake.deleteAppReturnsOnCall[len(fake.deleteAppArgsForCall)]
	fake.deleteAppArgsForCall = append(fake.deleteAppArgsForCall, struct {
		guid string
	}{guid})
	fake.recordInvocation("DeleteApp", []interface{}{guid})
	fake.deleteAppMutex.Unlock()
	if fake.DeleteAppStub != nil {
		return fake.DeleteAppStub(guid)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteAppReturns.result1
}

func (fake *FakeAPI) DeleteAppCallCount() int {
	fake.deleteAppMutex.RLock()
	defer fake.deleteAppMutex.RUnlock()
	return len(fake.deleteAppArgsForCall)
}

func (fake *FakeAPI) DeleteAppArgsForCall(i int) string {
	fake.deleteAppMutex.RLock()
	defer fake.deleteAppMutex.RUnlock()
	return fake.deleteAppArgsForCall[i].guid
}

func (fake *FakeAPI) DeleteAppReturns(result1 error) {
	fake.DeleteAppStub = nil
	fake.deleteAppReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAPI) DeleteAppReturnsOnCall(i int, result1 error) {
	fake.DeleteAppStub = nil
	if fake.deleteAppReturnsOnCall == nil {
		fake.deleteAppReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteAppReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAPI) GetAppBits(appGUID string) (r io.ReadCloser, err error) {
	fake.getAppBitsMutex.Lock()
	ret, specificReturn := fake.getAppBitsReturnsOnCall[len(fake.getAppBitsArgsForCall)]
	fake.getAppBitsArgsForCall = append(fake.getAppBitsArgsForCall, struct {
		appGUID string
	}{appGUID})
	fake.recordInvocation("GetAppBits", []interface{}{appGUID})
	fake.getAppBitsMutex.Unlock()
	if fake.GetAppBitsStub != nil {
		return fake.GetAppBitsStub(appGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAppBitsReturns.result1, fake.getAppBitsReturns.result2
}

func (fake *FakeAPI) GetAppBitsCallCount() int {
	fake.getAppBitsMutex.RLock()
	defer fake.getAppBitsMutex.RUnlock()
	return len(fake.getAppBitsArgsForCall)
}

func (fake *FakeAPI) GetAppBitsArgsForCall(i int) string {
	fake.getAppBitsMutex.RLock()
	defer fake.getAppBitsMutex.RUnlock()
	return fake.getAppBitsArgsForCall[i].appGUID
}

func (fake *FakeAPI) GetAppBitsReturns(result1 io.ReadCloser, result2 error) {
	fake.GetAppBitsStub = nil
	fake.getAppBitsReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetAppBitsReturnsOnCall(i int, result1 io.ReadCloser, result2 error) {
	fake.GetAppBitsStub = nil
	if fake.getAppBitsReturnsOnCall == nil {
		fake.getAppBitsReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
			result2 error
		})
	}
	fake.getAppBitsReturnsOnCall[i] = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetAppByGuid(guid string) (app cfclient.App, err error) {
	fake.getAppByGuidMutex.Lock()
	ret, specificReturn := fake.getAppByGuidReturnsOnCall[len(fake.getAppByGuidArgsForCall)]
	fake.getAppByGuidArgsForCall = append(fake.getAppByGuidArgsForCall, struct {
		guid string
	}{guid})
	fake.recordInvocation("GetAppByGuid", []interface{}{guid})
	fake.getAppByGuidMutex.Unlock()
	if fake.GetAppByGuidStub != nil {
		return fake.GetAppByGuidStub(guid)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAppByGuidReturns.result1, fake.getAppByGuidReturns.result2
}

func (fake *FakeAPI) GetAppByGuidCallCount() int {
	fake.getAppByGuidMutex.RLock()
	defer fake.getAppByGuidMutex.RUnlock()
	return len(fake.getAppByGuidArgsForCall)
}

func (fake *FakeAPI) GetAppByGuidArgsForCall(i int) string {
	fake.getAppByGuidMutex.RLock()
	defer fake.getAppByGuidMutex.RUnlock()
	return fake.getAppByGuidArgsForCall[i].guid
}

func (fake *FakeAPI) GetAppByGuidReturns(result1 cfclient.App, result2 error) {
	fake.GetAppByGuidStub = nil
	fake.getAppByGuidReturns = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetAppByGuidReturnsOnCall(i int, result1 cfclient.App, result2 error) {
	fake.GetAppByGuidStub = nil
	if fake.getAppByGuidReturnsOnCall == nil {
		fake.getAppByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.App
			result2 error
		})
	}
	fake.getAppByGuidReturnsOnCall[i] = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetAppInstances(guid string) (instances map[string]cfclient.AppInstance, err error) {
	fake.getAppInstancesMutex.Lock()
	ret, specificReturn := fake.getAppInstancesReturnsOnCall[len(fake.getAppInstancesArgsForCall)]
	fake.getAppInstancesArgsForCall = append(fake.getAppInstancesArgsForCall, struct {
		guid string
	}{guid})
	fake.recordInvocation("GetAppInstances", []interface{}{guid})
	fake.getAppInstancesMutex.Unlock()
	if fake.GetAppInstancesStub != nil {
		return fake.GetAppInstancesStub(guid)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAppInstancesReturns.result1, fake.getAppInstancesReturns.result2
}

func (fake *FakeAPI) GetAppInstancesCallCount() int {
	fake.getAppInstancesMutex.RLock()
	defer fake.getAppInstancesMutex.RUnlock()
	return len(fake.getAppInstancesArgsForCall)
}

func (fake *FakeAPI) GetAppInstancesArgsForCall(i int) string {
	fake.getAppInstancesMutex.RLock()
	defer fake.getAppInstancesMutex.RUnlock()
	return fake.getAppInstancesArgsForCall[i].guid
}

func (fake *FakeAPI) GetAppInstancesReturns(result1 map[string]cfclient.AppInstance, result2 error) {
	fake.GetAppInstancesStub = nil
	fake.getAppInstancesReturns = struct {
		result1 map[string]cfclient.AppInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetAppInstancesReturnsOnCall(i int, result1 map[string]cfclient.AppInstance, result2 error) {
	fake.GetAppInstancesStub = nil
	if fake.getAppInstancesReturnsOnCall == nil {
		fake.getAppInstancesReturnsOnCall = make(map[int]struct {
			result1 map[string]cfclient.AppInstance
			result2 error
		})
	}
	fake.getAppInstancesReturnsOnCall[i] = struct {
		result1 map[string]cfclient.AppInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetAppRoutes(appGUID string) ([]cfclient.Route, error) {
	fake.getAppRoutesMutex.Lock()
	ret, specificReturn := fake.getAppRoutesReturnsOnCall[len(fake.getAppRoutesArgsForCall)]
	fake.getAppRoutesArgsForCall = append(fake.getAppRoutesArgsForCall, struct {
		appGUID string
	}{appGUID})
	fake.recordInvocation("GetAppRoutes", []interface{}{appGUID})
	fake.getAppRoutesMutex.Unlock()
	if fake.GetAppRoutesStub != nil {
		return fake.GetAppRoutesStub(appGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAppRoutesReturns.result1, fake.getAppRoutesReturns.result2
}

func (fake *FakeAPI) GetAppRoutesCallCount() int {
	fake.getAppRoutesMutex.RLock()
	defer fake.getAppRoutesMutex.RUnlock()
	return len(fake.getAppRoutesArgsForCall)
}

func (fake *FakeAPI) GetAppRoutesArgsForCall(i int) string {
	fake.getAppRoutesMutex.RLock()
	defer fake.getAppRoutesMutex.RUnlock()
	return fake.getAppRoutesArgsForCall[i].appGUID
}

func (fake *FakeAPI) GetAppRoutesReturns(result1 []cfclient.Route, result2 error) {
	fake.GetAppRoutesStub = nil
	fake.getAppRoutesReturns = struct {
		result1 []cfclient.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetAppRoutesReturnsOnCall(i int, result1 []cfclient.Route, result2 error) {
	fake.GetAppRoutesStub = nil
	if fake.getAppRoutesReturnsOnCall == nil {
		fake.getAppRoutesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Route
			result2 error
		})
	}
	fake.getAppRoutesReturnsOnCall[i] = struct {
		result1 []cfclient.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetInfo() (*cfclient.Info, error) {
	fake.getInfoMutex.Lock()
	ret, specificReturn := fake.getInfoReturnsOnCall[len(fake.getInfoArgsForCall)]
	fake.getInfoArgsForCall = append(fake.getInfoArgsForCall, struct{}{})
	fake.recordInvocation("GetInfo", []interface{}{})
	fake.getInfoMutex.Unlock()
	if fake.GetInfoStub != nil {
		return fake.GetInfoStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getInfoReturns.result1, fake.getInfoReturns.result2
}

func (fake *FakeAPI) GetInfoCallCount() int {
	fake.getInfoMutex.RLock()
	defer fake.getInfoMutex.RUnlock()
	return len(fake.getInfoArgsForCall)
}

func (fake *FakeAPI) GetInfoReturns(result1 *cfclient.Info, result2 error) {
	fake.GetInfoStub = nil
	fake.getInfoReturns = struct {
		result1 *cfclient.Info
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetInfoReturnsOnCall(i int, result1 *cfclient.Info, result2 error) {
	fake.GetInfoStub = nil
	if fake.getInfoReturnsOnCall == nil {
		fake.getInfoReturnsOnCall = make(map[int]struct {
			result1 *cfclient.Info
			result2 error
		})
	}
	fake.getInfoReturnsOnCall[i] = struct {
		result1 *cfclient.Info
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetOrgByName(name string) (cfclient.Org, error) {
	fake.getOrgByNameMutex.Lock()
	ret, specificReturn := fake.getOrgByNameReturnsOnCall[len(fake.getOrgByNameArgsForCall)]
	fake.getOrgByNameArgsForCall = append(fake.getOrgByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetOrgByName", []interface{}{name})
	fake.getOrgByNameMutex.Unlock()
	if fake.GetOrgByNameStub != nil {
		return fake.GetOrgByNameStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getOrgByNameReturns.result1, fake.getOrgByNameReturns.result2
}

func (fake *FakeAPI) GetOrgByNameCallCount() int {
	fake.getOrgByNameMutex.RLock()
	defer fake.getOrgByNameMutex.RUnlock()
	return len(fake.getOrgByNameArgsForCall)
}

func (fake *FakeAPI) GetOrgByNameArgsForCall(i int) string {
	fake.getOrgByNameMutex.RLock()
	defer fake.getOrgByNameMutex.RUnlock()
	return fake.getOrgByNameArgsForCall[i].name
}

func (fake *FakeAPI) GetOrgByNameReturns(result1 cfclient.Org, result2 error) {
	fake.GetOrgByNameStub = nil
	fake.getOrgByNameReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetOrgByNameReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.GetOrgByNameStub = nil
	if fake.getOrgByNameReturnsOnCall == nil {
		fake.getOrgByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.getOrgByNameReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetSharedDomainByName(name string) (cfclient.SharedDomain, error) {
	fake.getSharedDomainByNameMutex.Lock()
	ret, specificReturn := fake.getSharedDomainByNameReturnsOnCall[len(fake.getSharedDomainByNameArgsForCall)]
	fake.getSharedDomainByNameArgsForCall = append(fake.getSharedDomainByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetSharedDomainByName", []interface{}{name})
	fake.getSharedDomainByNameMutex.Unlock()
	if fake.GetSharedDomainByNameStub != nil {
		return fake.GetSharedDomainByNameStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getSharedDomainByNameReturns.result1, fake.getSharedDomainByNameReturns.result2
}

func (fake *FakeAPI) GetSharedDomainByNameCallCount() int {
	fake.getSharedDomainByNameMutex.RLock()
	defer fake.getSharedDomainByNameMutex.RUnlock()
	return len(fake.getSharedDomainByNameArgsForCall)
}

func (fake *FakeAPI) GetSharedDomainByNameArgsForCall(i int) string {
	fake.getSharedDomainByNameMutex.RLock()
	defer fake.getSharedDomainByNameMutex.RUnlock()
	return fake.getSharedDomainByNameArgsForCall[i].name
}

func (fake *FakeAPI) GetSharedDomainByNameReturns(result1 cfclient.SharedDomain, result2 error) {
	fake.GetSharedDomainByNameStub = nil
	fake.getSharedDomainByNameReturns = struct {
		result1 cfclient.SharedDomain
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetSharedDomainByNameReturnsOnCall(i int, result1 cfclient.SharedDomain, result2 error) {
	fake.GetSharedDomainByNameStub = nil
	if fake.getSharedDomainByNameReturnsOnCall == nil {
		fake.getSharedDomainByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.SharedDomain
			result2 error
		})
	}
	fake.getSharedDomainByNameReturnsOnCall[i] = struct {
		result1 cfclient.SharedDomain
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetSpaceByName(spaceName string, orgGUID string) (space cfclient.Space, err error) {
	fake.getSpaceByNameMutex.Lock()
	ret, specificReturn := fake.getSpaceByNameReturnsOnCall[len(fake.getSpaceByNameArgsForCall)]
	fake.getSpaceByNameArgsForCall = append(fake.getSpaceByNameArgsForCall, struct {
		spaceName string
		orgGUID   string
	}{spaceName, orgGUID})
	fake.recordInvocation("GetSpaceByName", []interface{}{spaceName, orgGUID})
	fake.getSpaceByNameMutex.Unlock()
	if fake.GetSpaceByNameStub != nil {
		return fake.GetSpaceByNameStub(spaceName, orgGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getSpaceByNameReturns.result1, fake.getSpaceByNameReturns.result2
}

func (fake *FakeAPI) GetSpaceByNameCallCount() int {
	fake.getSpaceByNameMutex.RLock()
	defer fake.getSpaceByNameMutex.RUnlock()
	return len(fake.getSpaceByNameArgsForCall)
}

func (fake *FakeAPI) GetSpaceByNameArgsForCall(i int) (string, string) {
	fake.getSpaceByNameMutex.RLock()
	defer fake.getSpaceByNameMutex.RUnlock()
	return fake.getSpaceByNameArgsForCall[i].spaceName, fake.getSpaceByNameArgsForCall[i].orgGUID
}

func (fake *FakeAPI) GetSpaceByNameReturns(result1 cfclient.Space, result2 error) {
	fake.GetSpaceByNameStub = nil
	fake.getSpaceByNameReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetSpaceByNameReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.GetSpaceByNameStub = nil
	if fake.getSpaceByNameReturnsOnCall == nil {
		fake.getSpaceByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.getSpaceByNameReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListApps() ([]cfclient.App, error) {
	fake.listAppsMutex.Lock()
	ret, specificReturn := fake.listAppsReturnsOnCall[len(fake.listAppsArgsForCall)]
	fake.listAppsArgsForCall = append(fake.listAppsArgsForCall, struct{}{})
	fake.recordInvocation("ListApps", []interface{}{})
	fake.listAppsMutex.Unlock()
	if fake.ListAppsStub != nil {
		return fake.ListAppsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listAppsReturns.result1, fake.listAppsReturns.result2
}

func (fake *FakeAPI) ListAppsCallCount() int {
	fake.listAppsMutex.RLock()
	defer fake.listAppsMutex.RUnlock()
	return len(fake.listAppsArgsForCall)
}

func (fake *FakeAPI) ListAppsReturns(result1 []cfclient.App, result2 error) {
	fake.ListAppsStub = nil
	fake.listAppsReturns = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListAppsReturnsOnCall(i int, result1 []cfclient.App, result2 error) {
	fake.ListAppsStub = nil
	if fake.listAppsReturnsOnCall == nil {
		fake.listAppsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.App
			result2 error
		})
	}
	fake.listAppsReturnsOnCall[i] = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListBuildpacks() ([]cfclient.Buildpack, error) {
	fake.listBuildpacksMutex.Lock()
	ret, specificReturn := fake.listBuildpacksReturnsOnCall[len(fake.listBuildpacksArgsForCall)]
	fake.listBuildpacksArgsForCall = append(fake.listBuildpacksArgsForCall, struct{}{})
	fake.recordInvocation("ListBuildpacks", []interface{}{})
	fake.listBuildpacksMutex.Unlock()
	if fake.ListBuildpacksStub != nil {
		return fake.ListBuildpacksStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listBuildpacksReturns.result1, fake.listBuildpacksReturns.result2
}

func (fake *FakeAPI) ListBuildpacksCallCount() int {
	fake.listBuildpacksMutex.RLock()
	defer fake.listBuildpacksMutex.RUnlock()
	return len(fake.listBuildpacksArgsForCall)
}

func (fake *FakeAPI) ListBuildpacksReturns(result1 []cfclient.Buildpack, result2 error) {
	fake.ListBuildpacksStub = nil
	fake.listBuildpacksReturns = struct {
		result1 []cfclient.Buildpack
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListBuildpacksReturnsOnCall(i int, result1 []cfclient.Buildpack, result2 error) {
	fake.ListBuildpacksStub = nil
	if fake.listBuildpacksReturnsOnCall == nil {
		fake.listBuildpacksReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Buildpack
			result2 error
		})
	}
	fake.listBuildpacksReturnsOnCall[i] = struct {
		result1 []cfclient.Buildpack
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListDomains() ([]cfclient.Domain, error) {
	fake.listDomainsMutex.Lock()
	ret, specificReturn := fake.listDomainsReturnsOnCall[len(fake.listDomainsArgsForCall)]
	fake.listDomainsArgsForCall = append(fake.listDomainsArgsForCall, struct{}{})
	fake.recordInvocation("ListDomains", []interface{}{})
	fake.listDomainsMutex.Unlock()
	if fake.ListDomainsStub != nil {
		return fake.ListDomainsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listDomainsReturns.result1, fake.listDomainsReturns.result2
}

func (fake *FakeAPI) ListDomainsCallCount() int {
	fake.listDomainsMutex.RLock()
	defer fake.listDomainsMutex.RUnlock()
	return len(fake.listDomainsArgsForCall)
}

func (fake *FakeAPI) ListDomainsReturns(result1 []cfclient.Domain, result2 error) {
	fake.ListDomainsStub = nil
	fake.listDomainsReturns = struct {
		result1 []cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListDomainsReturnsOnCall(i int, result1 []cfclient.Domain, result2 error) {
	fake.ListDomainsStub = nil
	if fake.listDomainsReturnsOnCall == nil {
		fake.listDomainsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Domain
			result2 error
		})
	}
	fake.listDomainsReturnsOnCall[i] = struct {
		result1 []cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListOrgQuotas() ([]cfclient.OrgQuota, error) {
	fake.listOrgQuotasMutex.Lock()
	ret, specificReturn := fake.listOrgQuotasReturnsOnCall[len(fake.listOrgQuotasArgsForCall)]
	fake.listOrgQuotasArgsForCall = append(fake.listOrgQuotasArgsForCall, struct{}{})
	fake.recordInvocation("ListOrgQuotas", []interface{}{})
	fake.listOrgQuotasMutex.Unlock()
	if fake.ListOrgQuotasStub != nil {
		return fake.ListOrgQuotasStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listOrgQuotasReturns.result1, fake.listOrgQuotasReturns.result2
}

func (fake *FakeAPI) ListOrgQuotasCallCount() int {
	fake.listOrgQuotasMutex.RLock()
	defer fake.listOrgQuotasMutex.RUnlock()
	return len(fake.listOrgQuotasArgsForCall)
}

func (fake *FakeAPI) ListOrgQuotasReturns(result1 []cfclient.OrgQuota, result2 error) {
	fake.ListOrgQuotasStub = nil
	fake.listOrgQuotasReturns = struct {
		result1 []cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListOrgQuotasReturnsOnCall(i int, result1 []cfclient.OrgQuota, result2 error) {
	fake.ListOrgQuotasStub = nil
	if fake.listOrgQuotasReturnsOnCall == nil {
		fake.listOrgQuotasReturnsOnCall = make(map[int]struct {
			result1 []cfclient.OrgQuota
			result2 error
		})
	}
	fake.listOrgQuotasReturnsOnCall[i] = struct {
		result1 []cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListOrgs() ([]cfclient.Org, error) {
	fake.listOrgsMutex.Lock()
	ret, specificReturn := fake.listOrgsReturnsOnCall[len(fake.listOrgsArgsForCall)]
	fake.listOrgsArgsForCall = append(fake.listOrgsArgsForCall, struct{}{})
	fake.recordInvocation("ListOrgs", []interface{}{})
	fake.listOrgsMutex.Unlock()
	if fake.ListOrgsStub != nil {
		return fake.ListOrgsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listOrgsReturns.result1, fake.listOrgsReturns.result2
}

func (fake *FakeAPI) ListOrgsCallCount() int {
	fake.listOrgsMutex.RLock()
	defer fake.listOrgsMutex.RUnlock()
	return len(fake.listOrgsArgsForCall)
}

func (fake *FakeAPI) ListOrgsReturns(result1 []cfclient.Org, result2 error) {
	fake.ListOrgsStub = nil
	fake.listOrgsReturns = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListOrgsReturnsOnCall(i int, result1 []cfclient.Org, result2 error) {
	fake.ListOrgsStub = nil
	if fake.listOrgsReturnsOnCall == nil {
		fake.listOrgsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Org
			result2 error
		})
	}
	fake.listOrgsReturnsOnCall[i] = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListRoutes() ([]cfclient.Route, error) {
	fake.listRoutesMutex.Lock()
	ret, specificReturn := fake.listRoutesReturnsOnCall[len(fake.listRoutesArgsForCall)]
	fake.listRoutesArgsForCall = append(fake.listRoutesArgsForCall, struct{}{})
	fake.recordInvocation("ListRoutes", []interface{}{})
	fake.listRoutesMutex.Unlock()
	if fake.ListRoutesStub != nil {
		return fake.ListRoutesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listRoutesReturns.result1, fake.listRoutesReturns.result2
}

func (fake *FakeAPI) ListRoutesCallCount() int {
	fake.listRoutesMutex.RLock()
	defer fake.listRoutesMutex.RUnlock()
	return len(fake.listRoutesArgsForCall)
}

func (fake *FakeAPI) ListRoutesReturns(result1 []cfclient.Route, result2 error) {
	fake.ListRoutesStub = nil
	fake.listRoutesReturns = struct {
		result1 []cfclient.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListRoutesReturnsOnCall(i int, result1 []cfclient.Route, result2 error) {
	fake.ListRoutesStub = nil
	if fake.listRoutesReturnsOnCall == nil {
		fake.listRoutesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Route
			result2 error
		})
	}
	fake.listRoutesReturnsOnCall[i] = struct {
		result1 []cfclient.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListSecGroups() ([]cfclient.SecGroup, error) {
	fake.listSecGroupsMutex.Lock()
	ret, specificReturn := fake.listSecGroupsReturnsOnCall[len(fake.listSecGroupsArgsForCall)]
	fake.listSecGroupsArgsForCall = append(fake.listSecGroupsArgsForCall, struct{}{})
	fake.recordInvocation("ListSecGroups", []interface{}{})
	fake.listSecGroupsMutex.Unlock()
	if fake.ListSecGroupsStub != nil {
		return fake.ListSecGroupsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listSecGroupsReturns.result1, fake.listSecGroupsReturns.result2
}

func (fake *FakeAPI) ListSecGroupsCallCount() int {
	fake.listSecGroupsMutex.RLock()
	defer fake.listSecGroupsMutex.RUnlock()
	return len(fake.listSecGroupsArgsForCall)
}

func (fake *FakeAPI) ListSecGroupsReturns(result1 []cfclient.SecGroup, result2 error) {
	fake.ListSecGroupsStub = nil
	fake.listSecGroupsReturns = struct {
		result1 []cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListSecGroupsReturnsOnCall(i int, result1 []cfclient.SecGroup, result2 error) {
	fake.ListSecGroupsStub = nil
	if fake.listSecGroupsReturnsOnCall == nil {
		fake.listSecGroupsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.SecGroup
			result2 error
		})
	}
	fake.listSecGroupsReturnsOnCall[i] = struct {
		result1 []cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListServiceBindings() ([]cfclient.ServiceBinding, error) {
	fake.listServiceBindingsMutex.Lock()
	ret, specificReturn := fake.listServiceBindingsReturnsOnCall[len(fake.listServiceBindingsArgsForCall)]
	fake.listServiceBindingsArgsForCall = append(fake.listServiceBindingsArgsForCall, struct{}{})
	fake.recordInvocation("ListServiceBindings", []interface{}{})
	fake.listServiceBindingsMutex.Unlock()
	if fake.ListServiceBindingsStub != nil {
		return fake.ListServiceBindingsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listServiceBindingsReturns.result1, fake.listServiceBindingsReturns.result2
}

func (fake *FakeAPI) ListServiceBindingsCallCount() int {
	fake.listServiceBindingsMutex.RLock()
	defer fake.listServiceBindingsMutex.RUnlock()
	return len(fake.listServiceBindingsArgsForCall)
}

func (fake *FakeAPI) ListServiceBindingsReturns(result1 []cfclient.ServiceBinding, result2 error) {
	fake.ListServiceBindingsStub = nil
	fake.listServiceBindingsReturns = struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListServiceBindingsReturnsOnCall(i int, result1 []cfclient.ServiceBinding, result2 error) {
	fake.ListServiceBindingsStub = nil
	if fake.listServiceBindingsReturnsOnCall == nil {
		fake.listServiceBindingsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceBinding
			result2 error
		})
	}
	fake.listServiceBindingsReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListServiceBrokers() ([]cfclient.ServiceBroker, error) {
	fake.listServiceBrokersMutex.Lock()
	ret, specificReturn := fake.listServiceBrokersReturnsOnCall[len(fake.listServiceBrokersArgsForCall)]
	fake.listServiceBrokersArgsForCall = append(fake.listServiceBrokersArgsForCall, struct{}{})
	fake.recordInvocation("ListServiceBrokers", []interface{}{})
	fake.listServiceBrokersMutex.Unlock()
	if fake.ListServiceBrokersStub != nil {
		return fake.ListServiceBrokersStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listServiceBrokersReturns.result1, fake.listServiceBrokersReturns.result2
}

func (fake *FakeAPI) ListServiceBrokersCallCount() int {
	fake.listServiceBrokersMutex.RLock()
	defer fake.listServiceBrokersMutex.RUnlock()
	return len(fake.listServiceBrokersArgsForCall)
}

func (fake *FakeAPI) ListServiceBrokersReturns(result1 []cfclient.ServiceBroker, result2 error) {
	fake.ListServiceBrokersStub = nil
	fake.listServiceBrokersReturns = struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListServiceBrokersReturnsOnCall(i int, result1 []cfclient.ServiceBroker, result2 error) {
	fake.ListServiceBrokersStub = nil
	if fake.listServiceBrokersReturnsOnCall == nil {
		fake.listServiceBrokersReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceBroker
			result2 error
		})
	}
	fake.listServiceBrokersReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListServiceInstances() ([]cfclient.ServiceInstance, error) {
	fake.listServiceInstancesMutex.Lock()
	ret, specificReturn := fake.listServiceInstancesReturnsOnCall[len(fake.listServiceInstancesArgsForCall)]
	fake.listServiceInstancesArgsForCall = append(fake.listServiceInstancesArgsForCall, struct{}{})
	fake.recordInvocation("ListServiceInstances", []interface{}{})
	fake.listServiceInstancesMutex.Unlock()
	if fake.ListServiceInstancesStub != nil {
		return fake.ListServiceInstancesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listServiceInstancesReturns.result1, fake.listServiceInstancesReturns.result2
}

func (fake *FakeAPI) ListServiceInstancesCallCount() int {
	fake.listServiceInstancesMutex.RLock()
	defer fake.listServiceInstancesMutex.RUnlock()
	return len(fake.listServiceInstancesArgsForCall)
}

func (fake *FakeAPI) ListServiceInstancesReturns(result1 []cfclient.ServiceInstance, result2 error) {
	fake.ListServiceInstancesStub = nil
	fake.listServiceInstancesReturns = struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListServiceInstancesReturnsOnCall(i int, result1 []cfclient.ServiceInstance, result2 error) {
	fake.ListServiceInstancesStub = nil
	if fake.listServiceInstancesReturnsOnCall == nil {
		fake.listServiceInstancesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceInstance
			result2 error
		})
	}
	fake.listServiceInstancesReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListServiceKeys() ([]cfclient.ServiceKey, error) {
	fake.listServiceKeysMutex.Lock()
	ret, specificReturn := fake.listServiceKeysReturnsOnCall[len(fake.listServiceKeysArgsForCall)]
	fake.listServiceKeysArgsForCall = append(fake.listServiceKeysArgsForCall, struct{}{})
	fake.recordInvocation("ListServiceKeys", []interface{}{})
	fake.listServiceKeysMutex.Unlock()
	if fake.ListServiceKeysStub != nil {
		return fake.ListServiceKeysStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listServiceKeysReturns.result1, fake.listServiceKeysReturns.result2
}

func (fake *FakeAPI) ListServiceKeysCallCount() int {
	fake.listServiceKeysMutex.RLock()
	defer fake.listServiceKeysMutex.RUnlock()
	return len(fake.listServiceKeysArgsForCall)
}

func (fake *FakeAPI) ListServiceKeysReturns(result1 []cfclient.ServiceKey, result2 error) {
	fake.ListServiceKeysStub = nil
	fake.listServiceKeysReturns = struct {
		result1 []cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListServiceKeysReturnsOnCall(i int, result1 []cfclient.ServiceKey, result2 error) {
	fake.ListServiceKeysStub = nil
	if fake.listServiceKeysReturnsOnCall == nil {
		fake.listServiceKeysReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceKey
			result2 error
		})
	}
	fake.listServiceKeysReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListServicePlanVisibilities() ([]cfclient.ServicePlanVisibility, error) {
	fake.listServicePlanVisibilitiesMutex.Lock()
	ret, specificReturn := fake.listServicePlanVisibilitiesReturnsOnCall[len(fake.listServicePlanVisibilitiesArgsForCall)]
	fake.listServicePlanVisibilitiesArgsForCall = append(fake.listServicePlanVisibilitiesArgsForCall, struct{}{})
	fake.recordInvocation("ListServicePlanVisibilities", []interface{}{})
	fake.listServicePlanVisibilitiesMutex.Unlock()
	if fake.ListServicePlanVisibilitiesStub != nil {
		return fake.ListServicePlanVisibilitiesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listServicePlanVisibilitiesReturns.result1, fake.listServicePlanVisibilitiesReturns.result2
}

func (fake *FakeAPI) ListServicePlanVisibilitiesCallCount() int {
	fake.listServicePlanVisibilitiesMutex.RLock()
	defer fake.listServicePlanVisibilitiesMutex.RUnlock()
	return len(fake.listServicePlanVisibilitiesArgsForCall)
}

func (fake *FakeAPI) ListServicePlanVisibilitiesReturns(result1 []cfclient.ServicePlanVisibility, result2 error) {
	fake.ListServicePlanVisibilitiesStub = nil
	fake.listServicePlanVisibilitiesReturns = struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListServicePlanVisibilitiesReturnsOnCall(i int, result1 []cfclient.ServicePlanVisibility, result2 error) {
	fake.ListServicePlanVisibilitiesStub = nil
	if fake.listServicePlanVisibilitiesReturnsOnCall == nil {
		fake.listServicePlanVisibilitiesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServicePlanVisibility
			result2 error
		})
	}
	fake.listServicePlanVisibilitiesReturnsOnCall[i] = struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListServicePlans() ([]cfclient.ServicePlan, error) {
	fake.listServicePlansMutex.Lock()
	ret, specificReturn := fake.listServicePlansReturnsOnCall[len(fake.listServicePlansArgsForCall)]
	fake.listServicePlansArgsForCall = append(fake.listServicePlansArgsForCall, struct{}{})
	fake.recordInvocation("ListServicePlans", []interface{}{})
	fake.listServicePlansMutex.Unlock()
	if fake.ListServicePlansStub != nil {
		return fake.ListServicePlansStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listServicePlansReturns.result1, fake.listServicePlansReturns.result2
}

func (fake *FakeAPI) ListServicePlansCallCount() int {
	fake.listServicePlansMutex.RLock()
	defer fake.listServicePlansMutex.RUnlock()
	return len(fake.listServicePlansArgsForCall)
}

func (fake *FakeAPI) ListServicePlansReturns(result1 []cfclient.ServicePlan, result2 error) {
	fake.ListServicePlansStub = nil
	fake.listServicePlansReturns = struct {
		result1 []cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListServicePlansReturnsOnCall(i int, result1 []cfclient.ServicePlan, result2 error) {
	fake.ListServicePlansStub = nil
	if fake.listServicePlansReturnsOnCall == nil {
		fake.listServicePlansReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServicePlan
			result2 error
		})
	}
	fake.listServicePlansReturnsOnCall[i] = struct {
		result1 []cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListServices() ([]cfclient.Service, error) {
	fake.listServicesMutex.Lock()
	ret, specificReturn := fake.listServicesReturnsOnCall[len(fake.listServicesArgsForCall)]
	fake.listServicesArgsForCall = append(fake.listServicesArgsForCall, struct{}{})
	fake.recordInvocation("ListServices", []interface{}{})
	fake.listServicesMutex.Unlock()
	if fake.ListServicesStub != nil {
		return fake.ListServicesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listServicesReturns.result1, fake.listServicesReturns.result2
}

func (fake *FakeAPI) ListServicesCallCount() int {
	fake.listServicesMutex.RLock()
	defer fake.listServicesMutex.RUnlock()
	return len(fake.listServicesArgsForCall)
}

func (fake *FakeAPI) ListServicesReturns(result1 []cfclient.Service, result2 error) {
	fake.ListServicesStub = nil
	fake.listServicesReturns = struct {
		result1 []cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListServicesReturnsOnCall(i int, result1 []cfclient.Service, result2 error) {
	fake.ListServicesStub = nil
	if fake.listServicesReturnsOnCall == nil {
		fake.listServicesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Service
			result2 error
		})
	}
	fake.listServicesReturnsOnCall[i] = struct {
		result1 []cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListSharedDomains() ([]cfclient.SharedDomain, error) {
	fake.listSharedDomainsMutex.Lock()
	ret, specificReturn := fake.listSharedDomainsReturnsOnCall[len(fake.listSharedDomainsArgsForCall)]
	fake.listSharedDomainsArgsForCall = append(fake.listSharedDomainsArgsForCall, struct{}{})
	fake.recordInvocation("ListSharedDomains", []interface{}{})
	fake.listSharedDomainsMutex.Unlock()
	if fake.ListSharedDomainsStub != nil {
		return fake.ListSharedDomainsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listSharedDomainsReturns.result1, fake.listSharedDomainsReturns.result2
}

func (fake *FakeAPI) ListSharedDomainsCallCount() int {
	fake.listSharedDomainsMutex.RLock()
	defer fake.listSharedDomainsMutex.RUnlock()
	return len(fake.listSharedDomainsArgsForCall)
}

func (fake *FakeAPI) ListSharedDomainsReturns(result1 []cfclient.SharedDomain, result2 error) {
	fake.ListSharedDomainsStub = nil
	fake.listSharedDomainsReturns = struct {
		result1 []cfclient.SharedDomain
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListSharedDomainsReturnsOnCall(i int, result1 []cfclient.SharedDomain, result2 error) {
	fake.ListSharedDomainsStub = nil
	if fake.listSharedDomainsReturnsOnCall == nil {
		fake.listSharedDomainsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.SharedDomain
			result2 error
		})
	}
	fake.listSharedDomainsReturnsOnCall[i] = struct {
		result1 []cfclient.SharedDomain
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListSpaces() ([]cfclient.Space, error) {
	fake.listSpacesMutex.Lock()
	ret, specificReturn := fake.listSpacesReturnsOnCall[len(fake.listSpacesArgsForCall)]
	fake.listSpacesArgsForCall = append(fake.listSpacesArgsForCall, struct{}{})
	fake.recordInvocation("ListSpaces", []interface{}{})
	fake.listSpacesMutex.Unlock()
	if fake.ListSpacesStub != nil {
		return fake.ListSpacesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listSpacesReturns.result1, fake.listSpacesReturns.result2
}

func (fake *FakeAPI) ListSpacesCallCount() int {
	fake.listSpacesMutex.RLock()
	defer fake.listSpacesMutex.RUnlock()
	return len(fake.listSpacesArgsForCall)
}

func (fake *FakeAPI) ListSpacesReturns(result1 []cfclient.Space, result2 error) {
	fake.ListSpacesStub = nil
	fake.listSpacesReturns = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListSpacesReturnsOnCall(i int, result1 []cfclient.Space, result2 error) {
	fake.ListSpacesStub = nil
	if fake.listSpacesReturnsOnCall == nil {
		fake.listSpacesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Space
			result2 error
		})
	}
	fake.listSpacesReturnsOnCall[i] = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListSpaceQuotas() ([]cfclient.SpaceQuota, error) {
	fake.listSpaceQuotasMutex.Lock()
	ret, specificReturn := fake.listSpaceQuotasReturnsOnCall[len(fake.listSpaceQuotasArgsForCall)]
	fake.listSpaceQuotasArgsForCall = append(fake.listSpaceQuotasArgsForCall, struct{}{})
	fake.recordInvocation("ListSpaceQuotas", []interface{}{})
	fake.listSpaceQuotasMutex.Unlock()
	if fake.ListSpaceQuotasStub != nil {
		return fake.ListSpaceQuotasStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listSpaceQuotasReturns.result1, fake.listSpaceQuotasReturns.result2
}

func (fake *FakeAPI) ListSpaceQuotasCallCount() int {
	fake.listSpaceQuotasMutex.RLock()
	defer fake.listSpaceQuotasMutex.RUnlock()
	return len(fake.listSpaceQuotasArgsForCall)
}

func (fake *FakeAPI) ListSpaceQuotasReturns(result1 []cfclient.SpaceQuota, result2 error) {
	fake.ListSpaceQuotasStub = nil
	fake.listSpaceQuotasReturns = struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListSpaceQuotasReturnsOnCall(i int, result1 []cfclient.SpaceQuota, result2 error) {
	fake.ListSpaceQuotasStub = nil
	if fake.listSpaceQuotasReturnsOnCall == nil {
		fake.listSpaceQuotasReturnsOnCall = make(map[int]struct {
			result1 []cfclient.SpaceQuota
			result2 error
		})
	}
	fake.listSpaceQuotasReturnsOnCall[i] = struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListStacks() ([]cfclient.Stack, error) {
	fake.listStacksMutex.Lock()
	ret, specificReturn := fake.listStacksReturnsOnCall[len(fake.listStacksArgsForCall)]
	fake.listStacksArgsForCall = append(fake.listStacksArgsForCall, struct{}{})
	fake.recordInvocation("ListStacks", []interface{}{})
	fake.listStacksMutex.Unlock()
	if fake.ListStacksStub != nil {
		return fake.ListStacksStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStacksReturns.result1, fake.listStacksReturns.result2
}

func (fake *FakeAPI) ListStacksCallCount() int {
	fake.listStacksMutex.RLock()
	defer fake.listStacksMutex.RUnlock()
	return len(fake.listStacksArgsForCall)
}

func (fake *FakeAPI) ListStacksReturns(result1 []cfclient.Stack, result2 error) {
	fake.ListStacksStub = nil
	fake.listStacksReturns = struct {
		result1 []cfclient.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListStacksReturnsOnCall(i int, result1 []cfclient.Stack, result2 error) {
	fake.ListStacksStub = nil
	if fake.listStacksReturnsOnCall == nil {
		fake.listStacksReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Stack
			result2 error
		})
	}
	fake.listStacksReturnsOnCall[i] = struct {
		result1 []cfclient.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListUserProvidedServiceInstances() ([]cfclient.UserProvidedServiceInstance, error) {
	fake.listUserProvidedServiceInstancesMutex.Lock()
	ret, specificReturn := fake.listUserProvidedServiceInstancesReturnsOnCall[len(fake.listUserProvidedServiceInstancesArgsForCall)]
	fake.listUserProvidedServiceInstancesArgsForCall = append(fake.listUserProvidedServiceInstancesArgsForCall, struct{}{})
	fake.recordInvocation("ListUserProvidedServiceInstances", []interface{}{})
	fake.listUserProvidedServiceInstancesMutex.Unlock()
	if fake.ListUserProvidedServiceInstancesStub != nil {
		return fake.ListUserProvidedServiceInstancesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listUserProvidedServiceInstancesReturns.result1, fake.listUserProvidedServiceInstancesReturns.result2
}

func (fake *FakeAPI) ListUserProvidedServiceInstancesCallCount() int {
	fake.listUserProvidedServiceInstancesMutex.RLock()
	defer fake.listUserProvidedServiceInstancesMutex.RUnlock()
	return len(fake.listUserProvidedServiceInstancesArgsForCall)
}

func (fake *FakeAPI) ListUserProvidedServiceInstancesReturns(result1 []cfclient.UserProvidedServiceInstance, result2 error) {
	fake.ListUserProvidedServiceInstancesStub = nil
	fake.listUserProvidedServiceInstancesReturns = struct {
		result1 []cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListUserProvidedServiceInstancesReturnsOnCall(i int, result1 []cfclient.UserProvidedServiceInstance, result2 error) {
	fake.ListUserProvidedServiceInstancesStub = nil
	if fake.listUserProvidedServiceInstancesReturnsOnCall == nil {
		fake.listUserProvidedServiceInstancesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.UserProvidedServiceInstance
			result2 error
		})
	}
	fake.listUserProvidedServiceInstancesReturnsOnCall[i] = struct {
		result1 []cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListUsers() (cfclient.Users, error) {
	fake.listUsersMutex.Lock()
	ret, specificReturn := fake.listUsersReturnsOnCall[len(fake.listUsersArgsForCall)]
	fake.listUsersArgsForCall = append(fake.listUsersArgsForCall, struct{}{})
	fake.recordInvocation("ListUsers", []interface{}{})
	fake.listUsersMutex.Unlock()
	if fake.ListUsersStub != nil {
		return fake.ListUsersStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listUsersReturns.result1, fake.listUsersReturns.result2
}

func (fake *FakeAPI) ListUsersCallCount() int {
	fake.listUsersMutex.RLock()
	defer fake.listUsersMutex.RUnlock()
	return len(fake.listUsersArgsForCall)
}

func (fake *FakeAPI) ListUsersReturns(result1 cfclient.Users, result2 error) {
	fake.ListUsersStub = nil
	fake.listUsersReturns = struct {
		result1 cfclient.Users
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListUsersReturnsOnCall(i int, result1 cfclient.Users, result2 error) {
	fake.ListUsersStub = nil
	if fake.listUsersReturnsOnCall == nil {
		fake.listUsersReturnsOnCall = make(map[int]struct {
			result1 cfclient.Users
			result2 error
		})
	}
	fake.listUsersReturnsOnCall[i] = struct {
		result1 cfclient.Users
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) UpdateApp(appGUID string, aur cfclient.AppUpdateResource) (cfclient.UpdateResponse, error) {
	fake.updateAppMutex.Lock()
	ret, specificReturn := fake.updateAppReturnsOnCall[len(fake.updateAppArgsForCall)]
	fake.updateAppArgsForCall = append(fake.updateAppArgsForCall, struct {
		appGUID string
		aur     cfclient.AppUpdateResource
	}{appGUID, aur})
	fake.recordInvocation("UpdateApp", []interface{}{appGUID, aur})
	fake.updateAppMutex.Unlock()
	if fake.UpdateAppStub != nil {
		return fake.UpdateAppStub(appGUID, aur)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateAppReturns.result1, fake.updateAppReturns.result2
}

func (fake *FakeAPI) UpdateAppCallCount() int {
	fake.updateAppMutex.RLock()
	defer fake.updateAppMutex.RUnlock()
	return len(fake.updateAppArgsForCall)
}

func (fake *FakeAPI) UpdateAppArgsForCall(i int) (string, cfclient.AppUpdateResource) {
	fake.updateAppMutex.RLock()
	defer fake.updateAppMutex.RUnlock()
	return fake.updateAppArgsForCall[i].appGUID, fake.updateAppArgsForCall[i].aur
}

func (fake *FakeAPI) UpdateAppReturns(result1 cfclient.UpdateResponse, result2 error) {
	fake.UpdateAppStub = nil
	fake.updateAppReturns = struct {
		result1 cfclient.UpdateResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) UpdateAppReturnsOnCall(i int, result1 cfclient.UpdateResponse, result2 error) {
	fake.UpdateAppStub = nil
	if fake.updateAppReturnsOnCall == nil {
		fake.updateAppReturnsOnCall = make(map[int]struct {
			result1 cfclient.UpdateResponse
			result2 error
		})
	}
	fake.updateAppReturnsOnCall[i] = struct {
		result1 cfclient.UpdateResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) UploadAppBits(file io.Reader, appGUID string) error {
	fake.uploadAppBitsMutex.Lock()
	ret, specificReturn := fake.uploadAppBitsReturnsOnCall[len(fake.uploadAppBitsArgsForCall)]
	fake.uploadAppBitsArgsForCall = append(fake.uploadAppBitsArgsForCall, struct {
		file    io.Reader
		appGUID string
	}{file, appGUID})
	fake.recordInvocation("UploadAppBits", []interface{}{file, appGUID})
	fake.uploadAppBitsMutex.Unlock()
	if fake.UploadAppBitsStub != nil {
		return fake.UploadAppBitsStub(file, appGUID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.uploadAppBitsReturns.result1
}

func (fake *FakeAPI) UploadAppBitsCallCount() int {
	fake.uploadAppBitsMutex.RLock()
	defer fake.uploadAppBitsMutex.RUnlock()
	return len(fake.uploadAppBitsArgsForCall)
}

func (fake *FakeAPI) UploadAppBitsArgsForCall(i int) (io.Reader, string) {
	fake.uploadAppBitsMutex.RLock()
	defer fake.uploadAppBitsMutex.RUnlock()
	return fake.uploadAppBitsArgsForCall[i].file, fake.uploadAppBitsArgsForCall[i].appGUID
}

func (fake *FakeAPI) UploadAppBitsReturns(result1 error) {
	fake.UploadAppBitsStub = nil
	fake.uploadAppBitsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAPI) UploadAppBitsReturnsOnCall(i int, result1 error) {
	fake.UploadAppBitsStub = nil
	if fake.uploadAppBitsReturnsOnCall == nil {
		fake.uploadAppBitsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.uploadAppBitsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAPI) ListSpacesByQuery(query url.Values) ([]cfclient.Space, error) {
	fake.listSpacesByQueryMutex.Lock()
	ret, specificReturn := fake.listSpacesByQueryReturnsOnCall[len(fake.listSpacesByQueryArgsForCall)]
	fake.listSpacesByQueryArgsForCall = append(fake.listSpacesByQueryArgsForCall, struct {
		query url.Values
	}{query})
	fake.recordInvocation("ListSpacesByQuery", []interface{}{query})
	fake.listSpacesByQueryMutex.Unlock()
	if fake.ListSpacesByQueryStub != nil {
		return fake.ListSpacesByQueryStub(query)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listSpacesByQueryReturns.result1, fake.listSpacesByQueryReturns.result2
}

func (fake *FakeAPI) ListSpacesByQueryCallCount() int {
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	return len(fake.listSpacesByQueryArgsForCall)
}

func (fake *FakeAPI) ListSpacesByQueryArgsForCall(i int) url.Values {
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	return fake.listSpacesByQueryArgsForCall[i].query
}

func (fake *FakeAPI) ListSpacesByQueryReturns(result1 []cfclient.Space, result2 error) {
	fake.ListSpacesByQueryStub = nil
	fake.listSpacesByQueryReturns = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListSpacesByQueryReturnsOnCall(i int, result1 []cfclient.Space, result2 error) {
	fake.ListSpacesByQueryStub = nil
	if fake.listSpacesByQueryReturnsOnCall == nil {
		fake.listSpacesByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Space
			result2 error
		})
	}
	fake.listSpacesByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListOrgsByQuery(query url.Values) ([]cfclient.Org, error) {
	fake.listOrgsByQueryMutex.Lock()
	ret, specificReturn := fake.listOrgsByQueryReturnsOnCall[len(fake.listOrgsByQueryArgsForCall)]
	fake.listOrgsByQueryArgsForCall = append(fake.listOrgsByQueryArgsForCall, struct {
		query url.Values
	}{query})
	fake.recordInvocation("ListOrgsByQuery", []interface{}{query})
	fake.listOrgsByQueryMutex.Unlock()
	if fake.ListOrgsByQueryStub != nil {
		return fake.ListOrgsByQueryStub(query)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listOrgsByQueryReturns.result1, fake.listOrgsByQueryReturns.result2
}

func (fake *FakeAPI) ListOrgsByQueryCallCount() int {
	fake.listOrgsByQueryMutex.RLock()
	defer fake.listOrgsByQueryMutex.RUnlock()
	return len(fake.listOrgsByQueryArgsForCall)
}

func (fake *FakeAPI) ListOrgsByQueryArgsForCall(i int) url.Values {
	fake.listOrgsByQueryMutex.RLock()
	defer fake.listOrgsByQueryMutex.RUnlock()
	return fake.listOrgsByQueryArgsForCall[i].query
}

func (fake *FakeAPI) ListOrgsByQueryReturns(result1 []cfclient.Org, result2 error) {
	fake.ListOrgsByQueryStub = nil
	fake.listOrgsByQueryReturns = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListOrgsByQueryReturnsOnCall(i int, result1 []cfclient.Org, result2 error) {
	fake.ListOrgsByQueryStub = nil
	if fake.listOrgsByQueryReturnsOnCall == nil {
		fake.listOrgsByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Org
			result2 error
		})
	}
	fake.listOrgsByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bindRouteMutex.RLock()
	defer fake.bindRouteMutex.RUnlock()
	fake.createAppMutex.RLock()
	defer fake.createAppMutex.RUnlock()
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	fake.deleteAppMutex.RLock()
	defer fake.deleteAppMutex.RUnlock()
	fake.getAppBitsMutex.RLock()
	defer fake.getAppBitsMutex.RUnlock()
	fake.getAppByGuidMutex.RLock()
	defer fake.getAppByGuidMutex.RUnlock()
	fake.getAppInstancesMutex.RLock()
	defer fake.getAppInstancesMutex.RUnlock()
	fake.getAppRoutesMutex.RLock()
	defer fake.getAppRoutesMutex.RUnlock()
	fake.getInfoMutex.RLock()
	defer fake.getInfoMutex.RUnlock()
	fake.getOrgByNameMutex.RLock()
	defer fake.getOrgByNameMutex.RUnlock()
	fake.getSharedDomainByNameMutex.RLock()
	defer fake.getSharedDomainByNameMutex.RUnlock()
	fake.getSpaceByNameMutex.RLock()
	defer fake.getSpaceByNameMutex.RUnlock()
	fake.listAppsMutex.RLock()
	defer fake.listAppsMutex.RUnlock()
	fake.listBuildpacksMutex.RLock()
	defer fake.listBuildpacksMutex.RUnlock()
	fake.listDomainsMutex.RLock()
	defer fake.listDomainsMutex.RUnlock()
	fake.listOrgQuotasMutex.RLock()
	defer fake.listOrgQuotasMutex.RUnlock()
	fake.listOrgsMutex.RLock()
	defer fake.listOrgsMutex.RUnlock()
	fake.listRoutesMutex.RLock()
	defer fake.listRoutesMutex.RUnlock()
	fake.listSecGroupsMutex.RLock()
	defer fake.listSecGroupsMutex.RUnlock()
	fake.listServiceBindingsMutex.RLock()
	defer fake.listServiceBindingsMutex.RUnlock()
	fake.listServiceBrokersMutex.RLock()
	defer fake.listServiceBrokersMutex.RUnlock()
	fake.listServiceInstancesMutex.RLock()
	defer fake.listServiceInstancesMutex.RUnlock()
	fake.listServiceKeysMutex.RLock()
	defer fake.listServiceKeysMutex.RUnlock()
	fake.listServicePlanVisibilitiesMutex.RLock()
	defer fake.listServicePlanVisibilitiesMutex.RUnlock()
	fake.listServicePlansMutex.RLock()
	defer fake.listServicePlansMutex.RUnlock()
	fake.listServicesMutex.RLock()
	defer fake.listServicesMutex.RUnlock()
	fake.listSharedDomainsMutex.RLock()
	defer fake.listSharedDomainsMutex.RUnlock()
	fake.listSpacesMutex.RLock()
	defer fake.listSpacesMutex.RUnlock()
	fake.listSpaceQuotasMutex.RLock()
	defer fake.listSpaceQuotasMutex.RUnlock()
	fake.listStacksMutex.RLock()
	defer fake.listStacksMutex.RUnlock()
	fake.listUserProvidedServiceInstancesMutex.RLock()
	defer fake.listUserProvidedServiceInstancesMutex.RUnlock()
	fake.listUsersMutex.RLock()
	defer fake.listUsersMutex.RUnlock()
	fake.updateAppMutex.RLock()
	defer fake.updateAppMutex.RUnlock()
	fake.uploadAppBitsMutex.RLock()
	defer fake.uploadAppBitsMutex.RUnlock()
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	fake.listOrgsByQueryMutex.RLock()
	defer fake.listOrgsByQueryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cffunctions.API = new(FakeAPI)
